name: release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  GO_VERSION: "1.23.x"
  NODE_VERSION: "24.5.0"
  NPM_VERSION: "11.5.1"
  PROJECT_NAME: "BulkMailerGo"
  APP_DESKTOP_NAME: "Bulk Mailer Go"
  ICON_PNG: "build/appicon.png"

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enforce npm version
        run: |
          npm i -g npm@${{ env.NPM_VERSION }}
          npm --version

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2

      - name: Install Linux GUI deps (Ubuntu)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update

          # Temel araçlar
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libglib2.0-dev \
            libgirepository1.0-dev \
            gir1.2-gtk-3.0 \
            libayatana-appindicator3-dev \
            libx11-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxfixes-dev libxrender-dev libxinerama-dev

          # WebKitGTK sürümü: Noble (24.04) -> 4.1; diğerleri genelde 4.0
          if grep -q "Ubuntu 24.04" /etc/issue || grep -q "noble" /etc/os-release; then
            sudo apt-get install -y libwebkit2gtk-4.1-dev
          else
            if sudo apt-get install -y libwebkit2gtk-4.0-dev; then
              echo "Installed libwebkit2gtk-4.0-dev"
            else
              echo "libwebkit2gtk-4.0-dev not found, trying 4.1..."
              sudo apt-get install -y libwebkit2gtk-4.1-dev
            fi
          fi

      - name: Frontend install (clean)
        run: npm ci --prefix frontend

      - name: Frontend build
        run: npm run build --prefix frontend

      - name: Wails build (Prod)
        run: wails build

      - name: Build AppImage (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          APPDIR="${{ env.PROJECT_NAME }}.AppDir"
          BIN_PATH="build/bin/${{ env.PROJECT_NAME }}"
          ICON_SRC="${{ env.ICON_PNG }}"
          DESKTOP_FILE="${{ env.PROJECT_NAME }}.desktop"

          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool

          rm -rf "${APPDIR}"
          mkdir -p "${APPDIR}/usr/bin"
          mkdir -p "${APPDIR}/usr/share/icons/hicolor/256x256/apps"
          mkdir -p "${APPDIR}/usr/share/applications"

          cp "${BIN_PATH}" "${APPDIR}/usr/bin/${{ env.PROJECT_NAME }}"

          if [ -f "${ICON_SRC}" ]; then
            cp "${ICON_SRC}" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/${{ env.PROJECT_NAME }}.png"
          fi

          cat > "${APPDIR}/${DESKTOP_FILE}" <<EOF
          [Desktop Entry]
          Type=Application
          Name=${{ env.APP_DESKTOP_NAME }}
          Exec=${{ env.PROJECT_NAME }}
          Icon=${{ env.PROJECT_NAME }}
          Categories=Network;Email;
          Comment=Professional Email Marketing Application
          Terminal=false
          EOF

          cat > "${APPDIR}/AppRun" <<'EOF'
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          export APPDIR="$HERE"
          exec "$HERE/usr/bin/BulkMailerGo" "$@"
          EOF
          chmod +x "${APPDIR}/AppRun"

          ./appimagetool "${APPDIR}" "${{ env.PROJECT_NAME }}_linux_x86_64.AppImage"

      - name: Archive artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          tar -czf linux_artifacts.tgz build/bin/*

      - name: Archive artifacts (macOS)
        if: runner.os == 'macOS'
        run: |
          tar -czf mac_artifacts.tgz build/bin/*

      - name: Archive artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          powershell -Command "Compress-Archive -Path build\\bin\\* -DestinationPath win_artifacts.zip"

      - name: Upload Linux artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux_artifacts
          path: |
            linux_artifacts.tgz
            BulkMailerGo_linux_x86_64.AppImage

      - name: Upload macOS artifacts
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: mac_artifacts
          path: mac_artifacts.tgz

      - name: Upload Windows artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: win_artifacts
          path: win_artifacts.zip

  publish:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          set -e
          mkdir -p release_assets
          cp artifacts/linux_artifacts/linux_artifacts.tgz release_assets/ || true
          cp artifacts/linux_artifacts/BulkMailerGo_linux_x86_64.AppImage release_assets/ || true
          cp artifacts/mac_artifacts/mac_artifacts.tgz release_assets/ || true
          cp artifacts/win_artifacts/win_artifacts.zip release_assets/ || true
          ls -la release_assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
