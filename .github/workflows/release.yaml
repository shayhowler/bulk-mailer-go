name: release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: "1.23.11"
  NODE_VERSION: "24.5.0"
  NPM_VERSION: "11.5.1"
  PROJECT_NAME: "BulkMailerGo"
  APP_DESKTOP_NAME: "Bulk Mailer Go"
  ICON_PNG: "build/appicon.png"

jobs:
  build-linux-arm64-docker-macos:
    name: Build Linux (arm64 via Docker on macOS)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build arm64 tool image
        shell: bash
        run: |
          set -euo pipefail
          cat > Dockerfile.arm64 <<'EOF'
          FROM ubuntu:22.04
          ENV DEBIAN_FRONTEND=noninteractive
          RUN apt-get update && apt-get install -y --no-install-recommends \
              curl wget git xz-utils ca-certificates build-essential pkg-config \
              libgtk-3-dev libglib2.0-dev libgirepository1.0-dev gir1.2-gtk-3.0 \
              libayatana-appindicator3-dev \
              libx11-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxfixes-dev libxrender-dev libxinerama-dev \
              libwebkit2gtk-4.1-dev libfuse2 \
              && rm -rf /var/lib/apt/lists/*
          ARG GO_VERSION=1.23.11
          RUN curl -fsSL https://go.dev/dl/go${GO_VERSION}.linux-arm64.tar.gz -o /tmp/go.tgz \
              && tar -C /usr/local -xzf /tmp/go.tgz && rm /tmp/go.tgz
          ENV GOPATH=/root/go
          ENV PATH="/usr/local/go/bin:${GOPATH}/bin:${PATH}"
          ARG NODE_VERSION=24.5.0
          RUN curl -fsSL https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-arm64.tar.xz -o /tmp/node.tar.xz \
              && mkdir -p /opt/node \
              && tar -C /opt/node -xJf /tmp/node.tar.xz --strip-components=1 \
              && rm /tmp/node.tar.xz
          ENV PATH="/opt/node/bin:${PATH}"
          RUN wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage -O /usr/local/bin/appimagetool \
              && chmod +x /usr/local/bin/appimagetool
          RUN go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2
          RUN if [ -d "/usr/include/webkitgtk-4.0" ]; then :; elif [ -d "/usr/include/webkitgtk-4.1" ]; then ln -s /usr/include/webkitgtk-4.1 /usr/include/webkitgtk-4.0; fi
          RUN PKGDIR="/usr/lib/aarch64-linux-gnu/pkgconfig"; if [ -f "$PKGDIR/webkit2gtk-4.0.pc" ]; then :; elif [ -f "$PKGDIR/webkit2gtk-4.1.pc" ] && [ ! -e "$PKGDIR/webkit2gtk-4.0.pc" ]; then ln -s "$PKGDIR/webkit2gtk-4.1.pc" "$PKGDIR/webkit2gtk-4.0.pc"; fi
          WORKDIR /workspace
          EOF
          docker buildx build --platform linux/arm64 -t bulk-mailer-arm64 -f Dockerfile.arm64 --build-arg GO_VERSION=${GO_VERSION} --build-arg NODE_VERSION=${NODE_VERSION} --load .

      - name: Build and package inside arm64 container
        shell: bash
        run: |
          set -euo pipefail
          docker run --rm --platform linux/arm64 -v "$PWD":/workspace -w /workspace bulk-mailer-arm64 /bin/bash -lc '
            set -euo pipefail
            npm ci --prefix frontend
            npm run build --prefix frontend
            export PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:${PKG_CONFIG_PATH:-}"
            wails build

            APPDIR="${PROJECT_NAME:-BulkMailerGo}-arm64.AppDir"
            BIN_PATH="build/bin/${PROJECT_NAME:-BulkMailerGo}"
            ICON_SRC="${ICON_PNG:-build/appicon.png}"
            DESKTOP_FILE="${PROJECT_NAME:-BulkMailerGo}.desktop"

            rm -rf "${APPDIR}"
            mkdir -p "${APPDIR}/usr/bin" "${APPDIR}/usr/share/icons/hicolor/256x256/apps" "${APPDIR}/usr/share/applications"
            cp "${BIN_PATH}" "${APPDIR}/usr/bin/${PROJECT_NAME:-BulkMailerGo}"

            if [ -f "${ICON_SRC}" ]; then
              cp "${ICON_SRC}" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/appicon.png"
              cp "${ICON_SRC}" "${APPDIR}/appicon.png"
            fi

            cat > "${APPDIR}/${DESKTOP_FILE}" <<'EOF'
            [Desktop Entry]
            Type=Application
            Name=${APP_DESKTOP_NAME:-Bulk Mailer Go}
            Exec=${PROJECT_NAME:-BulkMailerGo}
            Icon=appicon
            Categories=Network;Email;
            Comment=Professional Email Marketing Application
            Terminal=false
            EOF

            cat > "${APPDIR}/AppRun" <<'EOF'
            #!/bin/sh
            HERE="$(dirname "$(readlink -f "$0")")"
            export APPDIR="$HERE"
            exec "$HERE/usr/bin/BulkMailerGo" "$@"
            EOF
            chmod +x "${APPDIR}/AppRun"

            OUT_STD="${PROJECT_NAME:-BulkMailerGo}_linux_aarch64.AppImage"
            OUT_ALT="${PROJECT_NAME:-BulkMailerGo}_linux_aarch64.appimage"
            set -x
            appimagetool "${APPDIR}" "${OUT_STD}" || true
            if [ ! -f "${OUT_STD}" ] && [ -f "${OUT_ALT}" ]; then
              mv -f "${OUT_ALT}" "${OUT_STD}"
            fi
            if [ ! -f "${OUT_STD}" ]; then
              echo "AppImage not created"
              ls -la
              exit 1
            fi
          '
          test -f "BulkMailerGo_linux_aarch64.AppImage"

      - name: Upload ARM64 artifact (fail if missing)
        uses: actions/upload-artifact@v4
        with:
          name: Linux-arm64-artifacts
          path: BulkMailerGo_linux_aarch64.AppImage
          if-no-files-found: error

  build-linux-amd64:
    name: Build Linux (amd64 native)
    needs: [build-linux-arm64-docker-macos]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Enforce npm version
        shell: bash
        run: |
          set -euo pipefail
          npm i -g npm@${{ env.NPM_VERSION }}
          npm --version
      - name: Install Linux deps (amd64)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -o Acquire::Retries=3 -o Acquire::http::Timeout=30
          sudo apt-get install -y --no-install-recommends \
            libfuse2 build-essential pkg-config \
            libgtk-3-dev libglib2.0-dev libgirepository1.0-dev gir1.2-gtk-3.0 \
            libayatana-appindicator3-dev \
            libx11-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxfixes-dev libxrender-dev libxinerama-dev \
            libwebkit2gtk-4.1-dev || true
          if [ -d "/usr/include/webkitgtk-4.0" ]; then :; elif [ -d "/usr/include/webkitgtk-4.1" ]; then sudo ln -s /usr/include/webkitgtk-4.1 /usr/include/webkitgtk-4.0; fi
          PKGDIR="/usr/lib/x86_64-linux-gnu/pkgconfig"; [ -d "$PKGDIR" ] || PKGDIR="/usr/lib/pkgconfig"
          if [ -f "$PKGDIR/webkit2gtk-4.0.pc" ]; then :; elif [ -f "$PKGDIR/webkit2gtk-4.1.pc" ] && [ ! -e "$PKGDIR/webkit2gtk-4.0.pc" ]; then sudo ln -s "$PKGDIR/webkit2gtk-4.1.pc" "$PKGDIR/webkit2gtk-4.0.pc"; fi
          sudo rm -rf /var/lib/apt/lists/*
      - name: Install Wails CLI
        shell: bash
        run: |
          set -euo pipefail
          go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2
          echo "${HOME}/go/bin" >> $GITHUB_PATH
      - name: Frontend install
        run: npm ci --prefix frontend
      - name: Frontend build
        run: npm run build --prefix frontend
      - name: Wails build (amd64)
        shell: bash
        run: |
          set -euo pipefail
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:${PKG_CONFIG_PATH:-}"
          wails build
      - name: Build AppImage (amd64)
        shell: bash
        run: |
          set -euo pipefail
          APPDIR="${{ env.PROJECT_NAME }}-amd64.AppDir"
          BIN_PATH="build/bin/${{ env.PROJECT_NAME }}"
          ICON_SRC="${{ env.ICON_PNG }}"
          DESKTOP_FILE="${{ env.PROJECT_NAME }}.desktop"
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          rm -rf "${APPDIR}"
          mkdir -p "${APPDIR}/usr/bin" "${APPDIR}/usr/share/icons/hicolor/256x256/apps" "${APPDIR}/usr/share/applications"
          cp "${BIN_PATH}" "${APPDIR}/usr/bin/${{ env.PROJECT_NAME }}"
          if [ -f "${ICON_SRC}" ]; then
            cp "${ICON_SRC}" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/appicon.png"
            cp "${ICON_SRC}" "${APPDIR}/appicon.png"
          fi
          cat > "${APPDIR}/${DESKTOP_FILE}" <<'EOF'
          [Desktop Entry]
          Type=Application
          Name=${APP_DESKTOP_NAME}
          Exec=${PROJECT_NAME}
          Icon=appicon
          Categories=Network;Email;
          Comment=Professional Email Marketing Application
          Terminal=false
          EOF
          cat > "${APPDIR}/AppRun" <<'EOF'
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          export APPDIR="$HERE"
          exec "$HERE/usr/bin/BulkMailerGo" "$@"
          EOF
          chmod +x "${APPDIR}/AppRun"
          ./appimagetool "${APPDIR}" "${{ env.PROJECT_NAME }}_linux_amd64.AppImage"
      - name: Upload AMD64 artifact (fail if missing)
        uses: actions/upload-artifact@v4
        with:
          name: Linux-amd64-artifacts
          path: ${{ env.PROJECT_NAME }}_linux_amd64.AppImage
          if-no-files-found: error

  build-macos-arm64:
    name: Build macOS (arm64)
    needs: [build-linux-arm64-docker-macos]
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Enforce npm version
        run: |
          npm i -g npm@${{ env.NPM_VERSION }}
          npm --version
      - name: Install Wails CLI
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2
          echo "${HOME}/go/bin" >> $GITHUB_PATH
      - name: Frontend install
        run: npm ci --prefix frontend
      - name: Frontend build
        run: npm run build --prefix frontend
      - name: Wails build (arm64)
        shell: bash
        run: |
          set -euo pipefail
          export GOOS=darwin
          export GOARCH=arm64
          wails build
      - name: Ensure .icns (arm64)
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"
          ALT_NAME="${PROJECT_NAME}.app"
          if [ -d "build/bin/${APP_NAME}" ]; then APP_DIR="build/bin/${APP_NAME}"; elif [ -d "build/bin/${ALT_NAME}" ]; then APP_DIR="build/bin/${ALT_NAME}"; else echo "No .app found under build/bin"; ls -la build/bin || true; exit 1; fi
          ICON_IN="${ICON_PNG}"
          ICNS_PATH="${APP_DIR}/Contents/Resources/appicon.icns"
          mkdir -p "$(dirname "$ICNS_PATH")"
          if [ ! -f "$ICNS_PATH" ] && [ -f "$ICON_IN" ]; then
            W=$(sips -g pixelWidth "$ICON_IN" | awk '/pixelWidth:/{print $2}')
            H=$(sips -g pixelHeight "$ICON_IN" | awk '/pixelHeight:/{print $2}')
            if [ "$W" -ne 1024 ] || [ "$H" -ne 1024 ]; then sips -z 1024 1024 "$ICON_IN" --out "build/appicon_1024.png" >/dev/null; ICON_IN="build/appicon_1024.png"; fi
            ICONSET="appicon.iconset"; rm -rf "$ICONSET"; mkdir -p "$ICONSET"
            sips -z 16 16 "$ICON_IN" --out "$ICONSET/icon_16x16.png" >/dev/null
            sips -z 32 32 "$ICON_IN" --out "$ICONSET/icon_32x32.png" >/dev/null
            sips -z 128 128 "$ICON_IN" --out "$ICONSET/icon_128x128.png" >/dev/null
            sips -z 256 256 "$ICON_IN" --out "$ICONSET/icon_256x256.png" >/dev/null
            sips -z 512 512 "$ICON_IN" --out "$ICONSET/icon_512x512.png" >/dev/null
            sips -z 32 32 "$ICON_IN" --out "$ICONSET/icon_16x16@2x.png" >/dev/null
            sips -z 64 64 "$ICON_IN" --out "$ICONSET/icon_32x32@2x.png" >/dev/null
            sips -z 256 256 "$ICON_IN" --out "$ICONSET/icon_128x128@2x.png" >/dev/null
            sips -z 512 512 "$ICON_IN" --out "$ICONSET/icon_256x256@2x.png" >/dev/null
            cp "$ICON_IN" "$ICONSET/icon_512x512@2x.png"
            iconutil -c icns "$ICONSET" -o "$ICNS_PATH"
            rm -rf "$ICONSET"
          fi
          PLIST="${APP_DIR}/Contents/Info.plist"
          if /usr/libexec/PlistBuddy -c "Print :CFBundleIconFile" "$PLIST" >/dev/null 2>&1; then /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile appicon" "$PLIST"; else /usr/libexec/PlistBuddy -c "Add :CFBundleIconFile string appicon" "$PLIST"; fi
      - name: Import signing certificate
        shell: bash
        env:
          P12_B64: ${{ secrets.DEVELOPER_ID_APP_CERT_BASE64 }}
          P12_PASS: ${{ secrets.CERT_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN="build.keychain"
          security create-keychain -p "" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          echo "$P12_B64" | base64 --decode > app.p12
          security import app.p12 -k "$KEYCHAIN" -P "$P12_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
      - name: Codesign .app (arm64)
        shell: bash
        env:
          SIGN_IDENTITY_APP: ${{ secrets.SIGN_IDENTITY_APP }}
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"; ALT_NAME="${PROJECT_NAME}.app"
          if [ -d "build/bin/${APP_NAME}" ]; then APP_DIR="build/bin/${APP_NAME}"; elif [ -d "build/bin/${ALT_NAME}" ]; then APP_DIR="build/bin/${ALT_NAME}"; else echo "No .app found under build/bin"; exit 1; fi
          codesign --force --options runtime --deep -s "$SIGN_IDENTITY_APP" "$APP_DIR"
          codesign --verify --deep --strict "$APP_DIR"
      - name: Create DMG (arm64)
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"; ALT_NAME="${PROJECT_NAME}.app"; OUT_DMG="${PROJECT_NAME}_macOS_arm64.dmg"
          if [ -d "build/bin/${APP_NAME}" ]; then SRC_APP="build/bin/${APP_NAME}"; elif [ -d "build/bin/${ALT_NAME}" ]; then SRC_APP="build/bin/${ALT_NAME}"; else echo "No .app found under build/bin"; ls -la build/bin || true; exit 1; fi
          DMG_DIR="dmgroot"; rm -rf "${DMG_DIR}"; mkdir -p "${DMG_DIR}"
          cp -R "${SRC_APP}" "${DMG_DIR}/"; ln -s /Applications "${DMG_DIR}/Applications"
          hdiutil create -volname "${APP_DESKTOP_NAME}" -srcfolder "${DMG_DIR}" -ov -format UDZO "${OUT_DMG}"
          rm -rf "${DMG_DIR}"
      - name: Notarize + staple (arm64)
        shell: bash
        env:
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_BASE64: ${{ secrets.AC_API_KEY_BASE64 }}
        run: |
          set -euo pipefail
          OUT_DMG="${PROJECT_NAME}_macOS_arm64.dmg"
          echo "$AC_API_KEY_BASE64" | base64 --decode > authkey.p8
          xcrun notarytool submit "$OUT_DMG" --key authkey.p8 --key-id "$AC_API_KEY_ID" --issuer "$AC_API_ISSUER_ID" --wait
          xcrun stapler staple "$OUT_DMG"
          rm -f authkey.p8
      - name: Upload macOS arm64 artifact (fail if missing)
        uses: actions/upload-artifact@v4
        with:
          name: macOS-arm64-artifacts
          path: ${{ env.PROJECT_NAME }}_macOS_arm64.dmg
          if-no-files-found: error

  build-macos-amd64:
    name: Build macOS (amd64)
    needs: [build-linux-arm64-docker-macos]
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Enforce npm version
        run: |
          npm i -g npm@${{ env.NPM_VERSION }}
          npm --version
      - name: Install Wails CLI
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2
          echo "${HOME}/go/bin" >> $GITHUB_PATH
      - name: Frontend install
        run: npm ci --prefix frontend
      - name: Frontend build
        run: npm run build --prefix frontend
      - name: Wails build (amd64)
        shell: bash
        run: |
          set -euo pipefail
          export GOOS=darwin
          export GOARCH=amd64
          wails build
      - name: Ensure .icns (amd64)
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"; ALT_NAME="${PROJECT_NAME}.app"
          if [ -d "build/bin/${APP_NAME}" ]; then APP_DIR="build/bin/${APP_NAME}"; elif [ -d "build/bin/${ALT_NAME}" ]; then APP_DIR="build/bin/${ALT_NAME}"; else echo "No .app found under build/bin"; ls -la build/bin || true; exit 1; fi
          ICON_IN="${ICON_PNG}"; ICNS_PATH="${APP_DIR}/Contents/Resources/appicon.icns"
          mkdir -p "$(dirname "$ICNS_PATH")"
          if [ ! -f "$ICNS_PATH" ] && [ -f "$ICON_IN" ]; then
            W=$(sips -g pixelWidth "$ICON_IN" | awk '/pixelWidth:/{print $2}'); H=$(sips -g pixelHeight "$ICON_IN" | awk '/pixelHeight:/{print $2}')
            if [ "$W" -ne 1024 ] || [ "$H" -ne 1024 ]; then sips -z 1024 1024 "$ICON_IN" --out "build/appicon_1024.png" >/dev/null; ICON_IN="build/appicon_1024.png"; fi
            ICONSET="appicon.iconset"; rm -rf "$ICONSET"; mkdir -p "$ICONSET"
            sips -z 16 16 "$ICON_IN" --out "$ICONSET/icon_16x16.png" >/dev/null
            sips -z 32 32 "$ICON_IN" --out "$ICONSET/icon_32x32.png" >/dev/null
            sips -z 128 128 "$ICON_IN" --out "$ICONSET/icon_128x128.png" >/dev/null
            sips -z 256 256 "$ICON_IN" --out "$ICONSET/icon_256x256.png" >/dev/null
            sips -z 512 512 "$ICON_IN" --out "$ICONSET/icon_512x512.png" >/dev/null
            sips -z 32 32 "$ICON_IN" --out "$ICONSET/icon_16x16@2x.png" >/dev/null
            sips -z 64 64 "$ICON_IN" --out "$ICONSET/icon_32x32@2x.png" >/dev/null
            sips -z 256 256 "$ICON_IN" --out "$ICONSET/icon_128x128@2x.png" >/dev/null
            sips -z 512 512 "$ICON_IN" --out "$ICONSET/icon_256x256@2x.png" >/dev/null
            cp "$ICON_IN" "$ICONSET/icon_512x512@2x.png"
            iconutil -c icns "$ICONSET" -o "$ICNS_PATH"
            rm -rf "$ICONSET"
          fi
          PLIST="${APP_DIR}/Contents/Info.plist"
          if /usr/libexec/PlistBuddy -c "Print :CFBundleIconFile" "$PLIST" >/dev/null 2>&1; then /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile appicon" "$PLIST"; else /usr/libexec/PlistBuddy -c "Add :CFBundleIconFile string appicon" "$PLIST"; fi
      - name: Import signing certificate
        shell: bash
        env:
          P12_B64: ${{ secrets.DEVELOPER_ID_APP_CERT_BASE64 }}
          P12_PASS: ${{ secrets.CERT_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN="build.keychain"
          security create-keychain -p "" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          echo "$P12_B64" | base64 --decode > app.p12
          security import app.p12 -k "$KEYCHAIN" -P "$P12_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
      - name: Codesign .app (amd64)
        shell: bash
        env:
          SIGN_IDENTITY_APP: ${{ secrets.SIGN_IDENTITY_APP }}
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"; ALT_NAME="${PROJECT_NAME}.app"
          if [ -d "build/bin/${APP_NAME}" ]; then APP_DIR="build/bin/${APP_NAME}"; elif [ -d "build/bin/${ALT_NAME}" ]; then APP_DIR="build/bin/${ALT_NAME}"; else echo "No .app found under build/bin"; exit 1; fi
          codesign --force --options runtime --deep -s "$SIGN_IDENTITY_APP" "$APP_DIR"
          codesign --verify --deep --strict "$APP_DIR"
      - name: Create DMG (amd64)
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"; ALT_NAME="${PROJECT_NAME}.app"; OUT_DMG="${PROJECT_NAME}_macOS_amd64.dmg"
          if [ -d "build/bin/${APP_NAME}" ]; then SRC_APP="build/bin/${APP_NAME}"; elif [ -d "build/bin/${ALT_NAME}" ]; then SRC_APP="build/bin/${ALT_NAME}"; else echo "No .app found under build/bin"; ls -la build/bin || true; exit 1; fi
          DMG_DIR="dmgroot"; rm -rf "${DMG_DIR}"; mkdir -p "${DMG_DIR}"
          cp -R "${SRC_APP}" "${DMG_DIR}/"; ln -s /Applications "${DMG_DIR}/Applications"
          hdiutil create -volname "${APP_DESKTOP_NAME}" -srcfolder "${DMG_DIR}" -ov -format UDZO "${OUT_DMG}"
          rm -rf "${DMG_DIR}"
      - name: Notarize + staple (amd64)
        shell: bash
        env:
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_BASE64: ${{ secrets.AC_API_KEY_BASE64 }}
        run: |
          set -euo pipefail
          OUT_DMG="${PROJECT_NAME}_macOS_amd64.dmg"
          echo "$AC_API_KEY_BASE64" | base64 --decode > authkey.p8
          xcrun notarytool submit "$OUT_DMG" --key authkey.p8 --key-id "$AC_API_KEY_ID" --issuer "$AC_API_ISSUER_ID" --wait
          xcrun stapler staple "$OUT_DMG"
          rm -f authkey.p8
      - name: Upload macOS amd64 artifact (fail if missing)
        uses: actions/upload-artifact@v4
        with:
          name: macOS-amd64-artifacts
          path: ${{ env.PROJECT_NAME }}_macOS_amd64.dmg
          if-no-files-found: error

  build-windows:
    name: Build Windows (amd64+arm64)
    needs: [build-linux-arm64-docker-macos]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            goarch: amd64
            out_exe: "build\\bin\\x64\\BulkMailerGo_x64.exe"
          - arch: arm64
            goarch: arm64
            out_exe: "build\\bin\\arm64\\BulkMailerGo_arm64.exe"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Enforce npm version
        shell: powershell
        run: |
          npm i -g npm@${{ env.NPM_VERSION }}
          npm --version
      - name: Install Wails CLI
        shell: powershell
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2
          "$HOME\go\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          wails version
      - name: Frontend install
        shell: powershell
        run: npm ci --prefix frontend
      - name: Frontend build
        shell: powershell
        run: npm run build --prefix frontend
      - name: Wails build (Windows ${{ matrix.arch }})
        shell: powershell
        env:
          GOOS: windows
          GOARCH: ${{ matrix.goarch }}
        run: |
          $ErrorActionPreference = "Stop"
          $env:GOOS = "${env:GOOS}"
          $env:GOARCH = "${env:GOARCH}"
          wails build
      - name: Stage EXE
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $out = "${{ matrix.out_exe }}"
          New-Item -ItemType Directory -Path (Split-Path $out) -Force | Out-Null
          Copy-Item "build\bin\${{ env.PROJECT_NAME }}.exe" $out -Force
      - name: Setup NSIS
        run: choco install nsis -y
      - name: Build NSIS installer (${{ matrix.arch }})
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $ws = (Get-Location).Path
          New-Item -ItemType Directory -Path "build\windows\dist" -Force | Out-Null
          if ("${{ matrix.arch }}" -eq "amd64") {
            & makensis "-DWORKSPACE=$ws" ".\build\windows\installer_x64.nsi"
          } else {
            & makensis "-DWORKSPACE=$ws" ".\build\windows\installer_arm64.nsi"
          }
      - name: Prepare outputs
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path release_assets -Force | Out-Null
          Get-ChildItem "build\windows\dist" -Filter "*.exe" -ErrorAction SilentlyContinue | ForEach-Object { Copy-Item $_.FullName release_assets\ -Force }
      - name: Upload Windows artifacts (fail if missing)
        uses: actions/upload-artifact@v4
        with:
          name: Windows-${{ matrix.arch }}-artifacts
          path: release_assets/*
          if-no-files-found: error

  publish:
    name: Publish GitHub Release
    needs:
      - build-linux-arm64-docker-macos
      - build-linux-amd64
      - build-macos-arm64
      - build-macos-amd64
      - build-windows
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download Linux arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: Linux-arm64-artifacts
          path: artifacts/Linux-arm64

      - name: Download Linux amd64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: Linux-amd64-artifacts
          path: artifacts/Linux-amd64

      - name: Download macOS arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macOS-arm64-artifacts
          path: artifacts/macOS-arm64

      - name: Download macOS amd64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macOS-amd64-artifacts
          path: artifacts/macOS-amd64

      - name: Download Windows amd64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: Windows-amd64-artifacts
          path: artifacts/Windows-amd64

      - name: Download Windows arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: Windows-arm64-artifacts
          path: artifacts/Windows-arm64

      - name: Collect payload
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release_assets
          find artifacts -type f \( -iname "*.appimage" -o -iname "*.dmg" -o -iname "*.exe" \) -print0 | xargs -0 -I {} cp -f {} release_assets/
          ls -la release_assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
