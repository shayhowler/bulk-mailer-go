name: release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  GO_VERSION: "1.23.x"
  NODE_VERSION: "24.5.0"
  NPM_VERSION: "11.5.1"
  PROJECT_NAME: "BulkMailerGo"
  APP_DESKTOP_NAME: "Bulk Mailer Go"
  ICON_PNG: "build/appicon.png"

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enforce npm version
        run: |
          npm i -g npm@${{ env.NPM_VERSION }}
          npm --version

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2

      # ---------- Linux ----------
      - name: Install Linux GUI deps (Ubuntu symlink + FUSE)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y libfuse2
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libglib2.0-dev \
            libgirepository1.0-dev \
            gir1.2-gtk-3.0 \
            libayatana-appindicator3-dev \
            libx11-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxfixes-dev libxrender-dev libxinerama-dev \
            libwebkit2gtk-4.1-dev
          if [ -d "/usr/include/webkitgtk-4.1" ] && [ ! -e "/usr/include/webkitgtk-4.0" ]; then
            sudo ln -s /usr/include/webkitgtk-4.1 /usr/include/webkitgtk-4.0
          fi
          PKGDIR="/usr/lib/x86_64-linux-gnu/pkgconfig"
          if [ ! -d "$PKGDIR" ]; then
            PKGDIR="/usr/lib/pkgconfig"
          fi
          if [ -f "$PKGDIR/webkit2gtk-4.1.pc" ] && [ ! -e "$PKGDIR/webkit2gtk-4.0.pc" ]; then
            sudo ln -s "$PKGDIR/webkit2gtk-4.1.pc" "$PKGDIR/webkit2gtk-4.0.pc"
          fi

      - name: Frontend install (clean)
        run: npm ci --prefix frontend

      - name: Frontend build
        run: npm run build --prefix frontend

      - name: Wails build (Linux with PKG_CONFIG_PATH)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:${PKG_CONFIG_PATH:-}"
          wails build

      - name: Build AppImage (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          APPDIR="${{ env.PROJECT_NAME }}.AppDir"
          BIN_PATH="build/bin/${{ env.PROJECT_NAME }}"
          ICON_SRC="${{ env.ICON_PNG }}"
          DESKTOP_FILE="${{ env.PROJECT_NAME }}.desktop"
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          rm -rf "${APPDIR}"
          mkdir -p "${APPDIR}/usr/bin"
          mkdir -p "${APPDIR}/usr/share/icons/hicolor/256x256/apps"
          mkdir -p "${APPDIR}/usr/share/applications"
          cp "${BIN_PATH}" "${APPDIR}/usr/bin/${{ env.PROJECT_NAME }}"
          if [ -f "${ICON_SRC}" ]; then
            cp "${ICON_SRC}" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/appicon.png"
            cp "${ICON_SRC}" "${APPDIR}/appicon.png"
          fi
          cat > "${APPDIR}/${DESKTOP_FILE}" <<EOF
          [Desktop Entry]
          Type=Application
          Name=${{ env.APP_DESKTOP_NAME }}
          Exec=${{ env.PROJECT_NAME }}
          Icon=appicon
          Categories=Network;Email;
          Comment=Professional Email Marketing Application
          Terminal=false
          EOF
          cat > "${APPDIR}/AppRun" <<'EOF'
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          export APPDIR="$HERE"
          exec "$HERE/usr/bin/BulkMailerGo" "$@"
          EOF
          chmod +x "${APPDIR}/AppRun"
          ./appimagetool "${APPDIR}" "${{ env.PROJECT_NAME }}_linux_x86_64.AppImage"

      - name: Prepare outputs (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p release_assets
          [ -f "${{ env.PROJECT_NAME }}_linux_x86_64.AppImage" ] && cp "${{ env.PROJECT_NAME }}_linux_x86_64.AppImage" release_assets/ || true

      # ---------- macOS ----------
      - name: Wails build (macOS)
        if: runner.os == 'macOS'
        run: wails build

      - name: Create macOS DMG from .app
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="${APP_DESKTOP_NAME}.app"
          ALT_NAME="${PROJECT_NAME}.app"
          OUT_DMG="${PROJECT_NAME}_macOS.dmg"

          if [ -d "build/bin/${APP_NAME}" ]; then
            SRC_APP="build/bin/${APP_NAME}"
          elif [ -d "build/bin/${ALT_NAME}" ]; then
            SRC_APP="build/bin/${ALT_NAME}"
          else
            echo "No .app found under build/bin"
            ls -la build/bin || true
            exit 1
          fi

          DMG_DIR="dmgroot"
          rm -rf "${DMG_DIR}"
          mkdir -p "${DMG_DIR}"
          cp -R "${SRC_APP}" "${DMG_DIR}/"
          ln -s /Applications "${DMG_DIR}/Applications"

          hdiutil create -volname "${APP_DESKTOP_NAME}" -srcfolder "${DMG_DIR}" -ov -format UDZO "${OUT_DMG}"
          rm -rf "${DMG_DIR}"

      - name: Prepare outputs (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p release_assets
          [ -f "${{ env.PROJECT_NAME }}_macOS.dmg" ] && cp "${{ env.PROJECT_NAME }}_macOS.dmg" release_assets/ || true

      # ---------- Windows (x64 + ARM64 + NSIS) ----------
      - name: Build Windows x64 (Wails) and stage
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          wails build
          New-Item -ItemType Directory -Path build\bin\x64 -Force | Out-Null
          Copy-Item build\bin\${{ env.PROJECT_NAME }}.exe build\bin\x64\ -Force

      - name: Setup NSIS
        if: runner.os == 'Windows'
        run: choco install nsis -y

      - name: Build NSIS installer (x64)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          if (!(Test-Path dist)) { New-Item -ItemType Directory -Path dist | Out-Null }
          makensis .\build\windows\installer_x64.nsi

      - name: Build Windows ARM64 (Wails) and stage
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $env:GOOS = "windows"
          $env:GOARCH = "arm64"
          wails build
          New-Item -ItemType Directory -Path build\bin\arm64 -Force | Out-Null
          Copy-Item build\bin\${{ env.PROJECT_NAME }}.exe build\bin\arm64\ -Force

      - name: Build NSIS installer (ARM64)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          makensis .\build\windows\installer_arm64.nsi

      - name: Prepare outputs (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path release_assets -Force | Out-Null
          # Opsiyonel: ham exe'leri de eklemek istersen
          if (Test-Path build\bin\x64\${{ env.PROJECT_NAME }}.exe) { Copy-Item build\bin\x64\${{ env.PROJECT_NAME }}.exe release_assets\${{ env.PROJECT_NAME }}_windows_amd64.exe -Force }
          if (Test-Path build\bin\arm64\${{ env.PROJECT_NAME }}.exe) { Copy-Item build\bin\arm64\${{ env.PROJECT_NAME }}.exe release_assets\${{ env.PROJECT_NAME }}_windows_arm64.exe -Force }
          # NSIS installerâ€™lar
          Get-ChildItem dist\ -Filter "${{ env.PROJECT_NAME }}_Setup_*.exe" -ErrorAction SilentlyContinue | ForEach-Object { Copy-Item $_.FullName release_assets\ -Force }

      # ---------- Upload build outputs per OS ----------
      - name: Upload build outputs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-outputs
          path: release_assets/*

  publish:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all outputs
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare final assets
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release_assets
          # Linux AppImage
          cp artifacts/ubuntu-latest-outputs/*AppImage release_assets/ 2>/dev/null || true
          # macOS DMG
          cp artifacts/macos-latest-outputs/*.dmg release_assets/ 2>/dev/null || true
          # Windows EXE + Installers
          cp artifacts/windows-latest-outputs/*.exe release_assets/ 2>/dev/null || true
          ls -la release_assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
